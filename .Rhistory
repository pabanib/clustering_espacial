#val1 <- sim2[,1:100]
#val2 <- sim2[,100:200]
#mod <- keras_model_sequential()
inp1 <- layer_input(shape = c(200))
#inp2 <- layer_input(shape = c(100))
dense1 <- layer_dense(units = 80, activation = "relu")(inp1)
dense2 <- layer_dense(units = 80, activation = "relu")(inp1)
concat <- layer_concatenate(c(dense1,dense2))
concat <- layer_dense(units = 50, activation = "relu")(concat)
enco <- layer_dense(units = 10,activation = "relu")(concat)
dense <- layer_dense(units = 80, activation = "relu", kernel_regularizer = regularizer_l1(0.01))(enco)
decoder <- layer_dense(units = 200, activation = "relu", kernel_regularizer =  regularizer_l1(0.01))(dense)
autoencoder <- keras_model(inputs = inp1, outputs = decoder)
encoder <- keras_model(inputs = inp1, outputs = enco)
autoencoder$compile(optimizer = "adam", loss = "cosine_similarity")
val1 <- as.matrix(val1)
val2 <- as.matrix(val2)
list(val1,val2)
val1 <- runif(500*100)
val1 <- array(val1, c(500,100))
val2 <- runif(500*100)
val2 <- array(val2, c(500, 100))
mnist <- keras::dataset_mnist()
val <- runif(500*200)
val <- array(val, c(500,200))
val1 <- val[,1:100]
val2 <- val[,101:200]
autoencoder %>% fit(val, val, epochs = 10)
autoencoder %>% fit(val, val, epochs = 20
)
inp1 <- layer_input(shape = c(100))
inp2 <- layer_input(shape = c(100))
dense1 <- layer_dense(units = 80, activation = "relu")(inp1)
dense2 <- layer_dense(units = 80, activation = "relu")(inp2)
concat <- layer_concatenate(c(dense1,dense2))
concat <- layer_dense(units = 50, activation = "relu")(concat)
enco <- layer_dense(units = 10,activation = "relu")(concat)
dense <- layer_dense(units = 80, activation = "relu", kernel_regularizer = regularizer_l1(0.01))(enco)
decoder <- layer_dense(units = 200, activation = "relu", kernel_regularizer =  regularizer_l1(0.01))(dense)
autoencoder <- keras_model(inputs = c(inp1,inp2), outputs = decoder)
encoder <- keras_model(inputs = c(inp1,inp2), outputs = enco)
autoencoder$compile(optimizer = "adam", loss = "cosine_similarity")
val1 <- as.matrix(val1)
val2 <- as.matrix(val2)
list(val1,val2)
val1 <- runif(500*100)
val1 <- array(val1, c(500,100))
val2 <- runif(500*100)
val2 <- array(val2, c(500, 100))
mnist <- keras::dataset_mnist()
val <- runif(500*200)
val <- array(val, c(500,200))
val1 <- val[,1:100]
val2 <- val[,101:200]
autoencoder %>% fit(list(val1,val2), val, epochs = 20
)
autoencoder %>% compile(optimizer = "adam", loss = "cosine_similarity")
autoencoder %>% fit(list(val1,val2), val, epochs = 20)
autoencoder %>% fit(list(val1,val2), val, epochs = 20, validation_split = 0.2)
library(keras)
library(tensorflow)
library(spdep)
library(rgeoda)
library(digest)
#library(tensorflow)
#install_keras(tensorflow = "gpu")
#install_keras()
sim2 <- st_read("SDEC/datos/simulaciones/sim2.shp")
#sim2 <- as.data.frame(sim2)
#val1 <- sim2[,1:100]
#val2 <- sim2[,100:200]
#mod <- keras_model_sequential()
inp1 <- layer_input(shape = c(100))
inp2 <- layer_input(shape = c(100))
dense1 <- layer_dense(units = 80, activation = "relu")(inp1)
dense2 <- layer_dense(units = 80, activation = "relu")(inp2)
concat <- layer_concatenate(c(dense1,dense2))
concat <- layer_dense(units = 50, activation = "relu")(concat)
enco <- layer_dense(units = 10,activation = "relu")(concat)
dense <- layer_dense(units = 80, activation = "relu", kernel_regularizer = regularizer_l1(0.01))(enco)
decoder <- layer_dense(units = 200, activation = "relu", kernel_regularizer =  regularizer_l1(0.01))(dense)
autoencoder <- keras_model(inputs = c(inp1,inp2), outputs = decoder)
encoder <- keras_model(inputs = c(inp1,inp2), outputs = enco)
autoencoder %>% compile(optimizer = "adam", loss = "cosine_similarity")
val1 <- as.matrix(val1)
val2 <- as.matrix(val2)
list(val1,val2)
val1 <- runif(500*100)
val1 <- array(val1, c(500,100))
val2 <- runif(500*100)
val2 <- array(val2, c(500, 100))
mnist <- keras::dataset_mnist()
val <- runif(500*200)
val <- array(val, c(500,200))
val1 <- val[,1:100]
val2 <- val[,101:200]
autoencoder %>% fit(list(val1,val2), val, epochs = 20, validation_split = 0.2)
ClusteringLayer <- R6::R6Class( "clusteringlayer", inherit = KerasLayer,
public  = list(
num_enc = NULL,
initialize = funcition(num_enc) {
self$num_enc <- num_enc
}
build = function(input_shape){
self$kernel <- self$add_weight(
name = 'kernel',
shape = list(input_shape[[2]], self$num_enc)
)
call = function(x, mask = NULL){
tf$matmul(x, self$kernel)
}
}
))
ClusteringLayer <- R6::R6Class( "clusteringlayer", inherit = KerasLayer,
public  = list(
num_enc = NULL,
initialize = funcition(num_enc) {
self$num_enc <- num_enc
}
build = function(input_shape){
self$kernel <- self$add_weight(
name = 'kernel',
shape = list(input_shape[[2]], self$num_enc)
)
call = function(x, mask = NULL){
tf$matmul(x, self$kernel)
}
}
))
self$kernel <- self$add_weight(
name = 'kernel',
shape = list(input_shape[[2]], self$num_enc)
)
MyDenseLayer <- R6::R6Class("CustomLayer",
inherit = KerasLayer,
public = list(
num_outputs = NULL,
kernel = NULL,
initialize = function(num_outputs) {
self$num_outputs <- num_outputs
},
build = function(input_shape) {
self$kernel <- self$add_weight(
name = 'kernel',
shape = list(input_shape[[2]], self$num_outputs)
)
},
call = function(x, mask = NULL) {
tf$matmul(x, self$kernel)
}
)
)
ClusteringLayer <- R6::R6Class( "clusteringlayer", inherit = KerasLayer,
public  = list(
num_enc = NULL,
initialize = funcition(num_enc) {
self$num_enc <- num_enc
}
build = function(input_shape){
self$kernel <- self$add_weight(
name = 'kernel',
shape = list(input_shape[[2]], self$num_enc)
)
}
call = function(x, mask = NULL){
tf$matmul(x, self$kernel)
}
)
)
ClusteringLayer <- R6::R6Class( "clusteringlayer", inherit = KerasLayer,
public  = list(
num_enc = NULL,
initialize = funcition(num_enc) {
self$num_enc <- num_enc
}
build = function(input_shape){
self$kernel <- self$add_weight(
name = 'kernel',
shape = list(input_shape[[2]], self$num_enc)
)
}
call = function(x, mask = NULL){
tf$matmul(x, self$kernel)
}
)
)
MyDenseLayer <- R6::R6Class("CustomLayer",
inherit = KerasLayer,
public = list(
num_outputs = NULL,
kernel = NULL,
initialize = function(num_outputs) {
self$num_outputs <- num_outputs
},
build = function(input_shape) {
self$kernel <- self$add_weight(
name = 'kernel',
shape = list(input_shape[[2]], self$num_outputs)
)
},
call = function(x, mask = NULL) {
tf$matmul(x, self$kernel)
}
)
)
clustering <- R6::R6Class("ClusteringLayer",
inherit = KerasLayer,
public = list(
num_outputs = NULL,
kernel = NULL,
initialize = function(num_outputs) {
self$num_outputs <- num_outputs
},
build = function(input_shape) {
self$kernel <- self$add_weight(
name = 'kernel',
shape = list(input_shape[[2]], self$num_outputs)
)
},
call = function(x, mask = NULL) {
tf$matmul(x, self$kernel)
}
)
)
NULL is NULL
NULL == NULL
clustering <- R6::R6Class("ClusteringLayer",
inherit = KerasLayer,
public = list(
n_clusters = NULL,
weights = NULL,
alpha = 1.0,
initialize = function(n_clusters, weights = NULLm, alpha = 1.0) {
self$n_cluster <- n_clusters
self.alpha = alpha
self.initial_weights = weights
},
build = function(input_shape) {
input_dim <- input_shape[2]
#self.input_spec = InputSpec
self$clusters <- self$add_weight(
name = 'clusters',
shape = list(self$n_clusters, input_dim),
initialer = 'glorot_uniform'
)
if(!isnull(self$initial_weights)) {
self$set_weights(self$initial_weights)
}
self$built = TRUE
},
call = function(x, mask = NULL) {
tf$matmul(x, self$kernel)
}
)
)
clustering <- R6::R6Class("ClusteringLayer",
inherit = KerasLayer,
public = list(
n_clusters = NULL,
weights = NULL,
alpha = 1.0,
initialize = function(n_clusters, weights = NULLm, alpha = 1.0) {
self$n_cluster <- n_clusters
self.alpha = alpha
self.initial_weights = weights
},
build = function(input_shape) {
input_dim <- input_shape[2]
#self.input_spec = InputSpec
self$clusters <- self$add_weight(
name = 'clusters',
shape = list(self$n_clusters, input_dim),
initialer = 'glorot_uniform'
)
if(!isnull(self$initial_weights)) {
self$set_weights(self$initial_weights)
}
self$built = TRUE
},
call = function(inputs) {
q <- 1/(1+ (k_sum(k_square(k_expand_dims(inputs,axis = 1)-self$clusters), axis = 2)/self$alpha))
q <- q^((self.aplha+1)/2)
q <- k_transpose(k_transpose(q)/ k_sum(q, axis = 1))
return(q)
}
)
)
layer_my_dense <- function(object, n_clusters, weights = NULL,alpha = 1.0,name = NULL, trainable = TRUE) {
create_layer(clustering, object, list(
n_clusters = as.integer(n_clusters),
weights = weights,
alpha = alpha,
name = name,
trainable = trainable
))
}
cl <- layer_my_dense(n_clusters = 6)
layer_my_dense <- function(object, n_clusters, weights = NULL,alpha = 1.0,name = NULL, trainable = TRUE) {
create_layer(clustering, object, list(
n_clusters = as.integer(n_clusters),
weights = weights,
alpha = alpha,
name = name,
trainable = trainable
))
}
cl <- layer_my_dense(n_clusters = 6)
clustering <- R6::R6Class("ClusteringLayer",
inherit = KerasLayer,
public = list(
n_clusters = NULL,
weights = NULL,
alpha = 1.0,
initialize = function(n_clusters, weights = NULL, alpha = 1.0) {
self$n_cluster <- n_clusters
self$alpha <- alpha
self$initial_weights <- weights
},
build = function(input_shape) {
input_dim <- input_shape[2]
#self.input_spec = InputSpec
self$clusters <- self$add_weight(
name = 'clusters',
shape = list(self$n_clusters, input_dim),
initialer = 'glorot_uniform'
)
if(!isnull(self$initial_weights)) {
self$set_weights(self$initial_weights)
}
self$built = TRUE
},
call = function(inputs) {
q <- 1/(1+ (k_sum(k_square(k_expand_dims(inputs,axis = 1)-self$clusters), axis = 2)/self$alpha))
q <- q^((self.aplha+1)/2)
q <- k_transpose(k_transpose(q)/ k_sum(q, axis = 1))
return(q)
}
)
)
layer_my_dense <- function(object, n_clusters, weights = NULL,alpha = 1.0,name = NULL, trainable = TRUE) {
create_layer(clustering, object, list(
n_clusters = as.integer(n_clusters),
weights = weights,
alpha = alpha,
name = name,
trainable = trainable
))
}
cl <- layer_my_dense(n_clusters = 6)
clustering <- R6::R6Class("ClusteringLayer",
inherit = KerasLayer,
public = list(
#n_clusters = NULL,
#weights = NULL,
#alpha = 1.0,
initialize = function(n_clusters, weights = NULL, alpha = 1.0) {
self$n_cluster <- n_clusters
self$alpha <- alpha
self$initial_weights <- weights
},
build = function(input_shape) {
input_dim <- input_shape[2]
#self.input_spec = InputSpec
self$clusters <- self$add_weight(
name = 'clusters',
shape = list(self$n_clusters, input_dim),
initialer = 'glorot_uniform'
)
if(!isnull(self$initial_weights)) {
self$set_weights(self$initial_weights)
}
self$built = TRUE
},
call = function(inputs) {
q <- 1/(1+ (k_sum(k_square(k_expand_dims(inputs,axis = 1)-self$clusters), axis = 2)/self$alpha))
q <- q^((self.aplha+1)/2)
q <- k_transpose(k_transpose(q)/ k_sum(q, axis = 1))
return(q)
}
)
)
layer_my_dense <- function(object, n_clusters, weights = NULL,alpha = 1.0,name = NULL, trainable = TRUE) {
create_layer(clustering, object, list(
n_clusters = as.integer(n_clusters),
weights = weights,
alpha = alpha,
name = name,
trainable = trainable
))
}
cl <- layer_my_dense(n_clusters = 6)
clustering <- R6::R6Class("ClusteringLayer",
inherit = KerasLayer,
public = list(
n_clusters = NULL,
weights = NULL,
alpha = 1.0,
initialize = function(n_clusters, weights = NULL, alpha = 1.0) {
self$n_clusters <- n_clusters
self$alpha <- alpha
self$initial_weights <- weights
},
build = function(input_shape) {
input_dim <- input_shape[2]
#self.input_spec = InputSpec
self$clusters <- self$add_weight(
name = 'clusters',
shape = list(self$n_clusters, input_dim),
initialer = 'glorot_uniform'
)
if(!isnull(self$initial_weights)) {
self$set_weights(self$initial_weights)
}
self$built = TRUE
},
call = function(inputs) {
q <- 1/(1+ (k_sum(k_square(k_expand_dims(inputs,axis = 1)-self$clusters), axis = 2)/self$alpha))
q <- q^((self.aplha+1)/2)
q <- k_transpose(k_transpose(q)/ k_sum(q, axis = 1))
return(q)
}
)
)
layer_my_dense <- function(object, n_clusters, weights = NULL,alpha = 1.0,name = NULL, trainable = TRUE) {
create_layer(clustering, object, list(
n_clusters = as.integer(n_clusters),
weights = weights,
alpha = alpha,
name = name,
trainable = trainable
))
}
cl <- layer_my_dense(n_clusters = 6)
self$alpha <- alpha
clustering <- R6::R6Class("ClusteringLayer",
inherit = KerasLayer,
public = list(
n_clusters = NULL,
weights = NULL,
alpha = 1.0,
initialize = function(n_cluster, weights = NULL, alpha = 1.0) {
self$n_clusters <- n_cluster
self$alpha <- alpha
self$initial_weights <- weights
},
build = function(input_shape) {
input_dim <- input_shape[2]
#self.input_spec = InputSpec
self$clusters <- self$add_weight(
name = 'clusters',
shape = list(self$n_clusters, input_dim),
initialer = 'glorot_uniform'
)
if(!isnull(self$initial_weights)) {
self$set_weights(self$initial_weights)
}
self$built = TRUE
},
call = function(inputs) {
q <- 1/(1+ (k_sum(k_square(k_expand_dims(inputs,axis = 1)-self$clusters), axis = 2)/self$alpha))
q <- q^((self.aplha+1)/2)
q <- k_transpose(k_transpose(q)/ k_sum(q, axis = 1))
return(q)
}
)
)
layer_my_dense <- function(object, n_clusters, weights = NULL,alpha = 1.0,name = NULL, trainable = TRUE) {
create_layer(clustering, object, list(
n_clusters = as.integer(n_clusters),
weights = weights,
alpha = alpha,
name = name,
trainable = trainable
))
}
cl <- layer_my_dense(n_clusters = 6)
cl <- layer_my_dense(n_cluster = 6)
layer_my_dense <- function(object, n_clusters, weights = NULL,alpha = 1.0,name = NULL, trainable = TRUE) {
create_layer(clustering, object, list(
n_cluster = as.integer(n_clusters),
weights = weights,
alpha = alpha,
name = name,
trainable = trainable
))
}
cl <- layer_my_dense(n_cluster = 6)
layer_my_dense <- function(object, num_outputs, name = NULL, trainable = TRUE) {
create_layer(MyDenseLayer, object, list(
num_outputs = as.integer(num_outputs),
name = name,
trainable = trainable
))
}
layer <- layer_my_dense(num_outputs = 10)
layer(tf$zeros(shape(10, 5)))
setwd("D:/Archivos/Codigos/clustering espacial")
library(spdep)
library(rgeoda)
library(digest)
rdos <- matrix(nrow = 525)
rdos <- as.data.frame(rdos)
sim2 <- st_read("SDEC/datos/simulaciones/sim2.shp")
w_knn <- knn_weights(sim2,6)
sk <- rgeoda::skater(k = 6, w = w_knn, df = sim2)
rdos['skater'] <- sk$Clusters
redcap <- rgeoda::redcap(k = 6, w = w_knn, df = sim2)
rdos['redcap'] <- redcap$Clusters
schc <- rgeoda::schc(k = 6, w = w_knn, df = sim2)
rdos['schc'] <- schc$Clusters
rdos <- rdos[,2:4]
View(rdos)
